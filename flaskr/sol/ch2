pragma solidity ^0.6.0;

contract overflow{
      bool isoverflow;
    
      mapping(address => uint) balances;
      uint public totalSupply;
    
      constructor() public {
        balances[msg.sender] = totalSupply = 0;
      }
    
      function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        isoverflow = true;
        return true;
      }
    
      function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
      }
      
      function isof() public view returns (bool isoverflows) {
        return isoverflow;
      }
}